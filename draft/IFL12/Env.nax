data V : * -> (Nat -> *) -> Nat -> * where
  VNil  : V a r {`zero}
  VCons : a -> r {n} -> V a r {`succ n}
    deriving fixpoint Vec

data R = Read | Write -- resource access control

data Envr : ((R -> *) -> (Vec R n) -> *)
          -> (R -> *) -> (Vec R n) -> * where
  Empty  : Envr r iR {`vNil}
  Extend : iR {res} -> r iR {xs} -> Envr r iR {`vCons res xs}
    deriving fixpoint Env

data MyRes : R -> * where
   File1 : MyRes {Read}
   File2 : MyRes {Write}

-- myenv : Env MyRes {`vCons Read (`vCons Write `vNil)}
myenv = extend File1 (extend File2 empty)

data SN : (Nat -> *) -> Nat -> * where
  Szer : SN r {`zero}
  Ssuc : r {n} -> SN r {`succ n}
    deriving fixpoint SNat

data Envr' : ((R -> *) -> SNat n -> (Vec R n) -> *)
          -> (R -> *) -> SNat n -> (Vec R n) -> * where
  Empty'  : Envr' r iR {`szer} {`vNil}
  Extend' : iR {res} -> r iR {n} {xs} -> Envr' r iR {`ssuc n} {`vCons res xs}
    deriving fixpoint Env'

-- myenv' : Env' MyRes {`ssuc(`ssuc `szer)} {`vCons Read (`vCons Write `vNil)}
myenv' = extend' File1 (extend' File2 empty')
