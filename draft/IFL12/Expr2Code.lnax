%include lhs2TeX.fmt
%include includelhs2tex.lhs
%format cons = "{\text{\tiny cons}}"
%format ` = "\ensuremath{_{\grave{}}}"
\begin{code}
data Instr  :  (List Ty -> List Ty -> *) ->
               (List Ty -> List Ty -> *) where
   PUSH   : Val {t} -> Instr r {ts} {`cons t ts}
   ADD    : Instr r {`cons I (`cons I ts)} {`cons I ts}
   IFPOP  :  GList r {ts} {ts'} ->
             GList r {ts} {ts'} ->
             Instr r {`cons B ts} {ts'}
     deriving fixpoint Inst
{-""-}

synonym  Code sc sc' {-"~"-} -- |= GList Inst {sc} {sc'}|
  =  GList (Mu[List Ty -> List Ty -> *] Instr) {sc} {sc'}

compile e =
  mcata { {t} . Code {ts} {`cons t ts} } e with
    cmpl (VAL v)        =
      gCons (pUSH v) gNil
    cmpl (PLUS e1 e2)   =
      append  (append  (cmpl e1) (cmpl e2))
              (gCons aDD gNil)
    cmpl (IF e0 e1 e2)  =
      append  (cmpl e0)
              (gCons  (iFPOP  (cmpl e1)
                              (cmpl e2))
                      gNil)
\end{code}
