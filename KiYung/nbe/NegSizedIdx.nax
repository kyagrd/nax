data T r = Iota | Arr r r deriving fixpoint Ty

data V : (Ty -> *) -> (Ty -> *) where
  Fun  : (r {a} -> r {b}) -> V r {`arr a b}
  Base : V r {`iota}
   deriving fixpoint Val

{- assume that we have "mxxxx" that provides abstract operations
TODO
 -}

data V' : (Ty -> *) -> (Ty -> *) where
  Fun'  : (r {a} -> r {b}) -> V' r {`arr a b}
  Fuk'  : (r {a} -> r {a}) -> V' r {a}
  Base' : V r {`iota}
   deriving fixpoint Val'

{- Nathan's exercise attempting to construct self application
TODO
 -}
